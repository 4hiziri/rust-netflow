use super::flowset::*;

#[test]
fn test_data_template() {
    let data_template_payload: Vec<u8> = vec![
        0x00,
        0x00,
        0x00,
        0x5c,
        0x04,
        0x00,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x08,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x04,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x38,
        0x00,
        0x06,
        0x00,
        0x50,
        0x00,
        0x06,
        0x00,
        0x3a,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
    ];

    // parsing process test
    let template: Result<(&[u8], DataTemplate), ()> =
        DataTemplate::from_slice(&data_template_payload);
    assert!(template.is_ok(), "DataTemplate failed to parse");

    // parsing result test
    let (_rest, template): (&[u8], DataTemplate) = template.unwrap();
    assert_eq!(template.flowset_id, 0, "DataTemplate has wrong flowset_id.");
    assert_eq!(template.length, 92, "DataTemplate has wrong length.");
    assert_eq!(
        template.template_id,
        1024,
        "Datatemplate has wrong template_id."
    );
    assert_eq!(
        template.field_count,
        21,
        "Datatemplate has wrong field_count."
    );
    // TODO: Field test
}

#[test]
fn test_option_template() {
    let packet_bytes = vec![
        0x00,
        0x01,
        0x00,
        0x1a,
        0x10,
        0x00,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x31,
        0x00,
        0x01,
        0x00,
        0x32,
        0x00,
        0x04,
    ];

    let option: Result<(&[u8], OptionTemplate), ()> = OptionTemplate::from_slice(&packet_bytes);
    assert!(option.is_ok());

    let (_rest, option): (&[u8], OptionTemplate) = option.unwrap();
    assert_eq!(option.flowset_id, 1, "wrong OptionTemplate.flowset_id.");
    assert_eq!(option.length, 26, "wrong OptionTemplate.length.");
    assert_eq!(
        option.template_id,
        4096,
        "wrong OptionTemplate.template_id."
    );
    assert_eq!(
        option.option_scope_length,
        4,
        "wrong OptionTemplate.option_scope_length."
    );
    assert_eq!(
        option.option_length,
        12,
        "wrong Optiontemplate.option_length."
    );
}

#[test]
fn test_data_flow() {
    let packet_bytes = vec![
        0,
        9,
        0,
        3,
        0,
        80,
        117,
        49,
        90,
        213,
        108,
        133,
        0,
        0,
        3,
        99,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        184,
        0,
        58,
        245,
        102,
        0,
        58,
        229,
        198,
        0,
        0,
        10,
        240,
        0,
        0,
        0,
        5,
        4,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        192,
        168,
        6,
        101,
        192,
        168,
        6,
        254,
        0,
        0,
        0,
        0,
        192,
        0,
        1,
        8,
        0,
        39,
        58,
        221,
        86,
        144,
        27,
        14,
        149,
        116,
        147,
        0,
        0,
        0,
        0,
        0,
        3,
        1,
        0,
        59,
        101,
        130,
        0,
        59,
        101,
        130,
        0,
        0,
        0,
        76,
        0,
        0,
        0,
        1,
        4,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        192,
        168,
        6,
        102,
        91,
        189,
        89,
        199,
        0,
        123,
        0,
        123,
        184,
        0,
        17,
        200,
        211,
        255,
        232,
        104,
        96,
        144,
        27,
        14,
        149,
        116,
        147,
        0,
        0,
        0,
        0,
        0,
        3,
        1,
        0,
        59,
        109,
        82,
        0,
        59,
        109,
        82,
        0,
        0,
        0,
        76,
        0,
        0,
        0,
        1,
        4,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        192,
        168,
        6,
        102,
        157,
        7,
        153,
        56,
        0,
        123,
        0,
        123,
        184,
        0,
        17,
        200,
        211,
        255,
        232,
        104,
        96,
        144,
        27,
        14,
        149,
        116,
        147,
        0,
        0,
        0,
        0,
        0,
        3,
        1,
    ];

    assert!(false, "Not write yet.");
}
