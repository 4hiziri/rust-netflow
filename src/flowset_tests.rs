#[allow(unused_imports)]
use super::flowset::*;
use super::test_data;

#[test]
fn test_data_template() {
    let data_template_payload = vec![
        0x00,
        0x00,
        0x00,
        0x5c,
        0x04,
        0x00,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x08,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x04,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x38,
        0x00,
        0x06,
        0x00,
        0x50,
        0x00,
        0x06,
        0x00,
        0x3a,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
    ];

    // parsing process test
    let template: Result<(&[u8], DataTemplate), ()> =
        DataTemplate::from_bytes(&data_template_payload);
    assert!(template.is_ok());

    // parsing result test
    let (_rest, template): (&[u8], DataTemplate) = template.unwrap();
    assert_eq!(template.flowset_id, 0);
    assert_eq!(template.length, 92);
    assert_eq!(template.template_id, 1024);
    assert_eq!(template.field_count, 21);
    // TODO: Field test
}

#[test]
fn test_option_template() {
    let packet_bytes = vec![
        0x00,
        0x01,
        0x00,
        0x1a,
        0x10,
        0x00,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x31,
        0x00,
        0x01,
        0x00,
        0x32,
        0x00,
        0x04,
    ];

    let option: Result<(&[u8], OptionTemplate), ()> = OptionTemplate::from_bytes(&packet_bytes);
    assert!(option.is_ok());

    let (_rest, option): (&[u8], OptionTemplate) = option.unwrap();
    assert_eq!(option.flowset_id, 1);
    assert_eq!(option.length, 26);
    assert_eq!(option.template_id, 4096);
    assert_eq!(option.option_scope_length, 4);
    assert_eq!(option.option_length, 12);
}

#[test]
fn test_data_flow() {
    let packet_bytes = vec![
        0x10,
        0x00,
        0x00,
        0x0e,
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        0x02,
        0x00,
        0x00,
        0x00,
        0x01,
    ];

    let res = DataFlow::from_bytes(&packet_bytes);
    assert!(res.is_ok());
}

#[test]
fn test_netflow9() {
    let packet_bytes = vec![
        0x00,
        0x09,
        0x00,
        0x07,
        0x00,
        0x53,
        0xf4,
        0x93,
        0x5a,
        0xd5,
        0x6d,
        0x6a,
        0x00,
        0x00,
        0x03,
        0x73,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x5c,
        0x04,
        0x00,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x08,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x04,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x38,
        0x00,
        0x06,
        0x00,
        0x50,
        0x00,
        0x06,
        0x00,
        0x3a,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x00,
        0x00,
        0x5c,
        0x04,
        0x01,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x08,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x04,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x51,
        0x00,
        0x06,
        0x00,
        0x39,
        0x00,
        0x06,
        0x00,
        0x3b,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x00,
        0x00,
        0x5c,
        0x08,
        0x00,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x1b,
        0x00,
        0x10,
        0x00,
        0x1c,
        0x00,
        0x10,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x38,
        0x00,
        0x06,
        0x00,
        0x50,
        0x00,
        0x06,
        0x00,
        0x3a,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x00,
        0x00,
        0x5c,
        0x08,
        0x01,
        0x00,
        0x15,
        0x00,
        0x15,
        0x00,
        0x04,
        0x00,
        0x16,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x02,
        0x00,
        0x04,
        0x00,
        0x3c,
        0x00,
        0x01,
        0x00,
        0x0a,
        0x00,
        0x02,
        0x00,
        0x0e,
        0x00,
        0x02,
        0x00,
        0x3d,
        0x00,
        0x01,
        0x00,
        0x03,
        0x00,
        0x04,
        0x00,
        0x1b,
        0x00,
        0x10,
        0x00,
        0x1c,
        0x00,
        0x10,
        0x00,
        0x05,
        0x00,
        0x01,
        0x00,
        0x07,
        0x00,
        0x02,
        0x00,
        0x0b,
        0x00,
        0x02,
        0x00,
        0x06,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x01,
        0x00,
        0x51,
        0x00,
        0x06,
        0x00,
        0x39,
        0x00,
        0x06,
        0x00,
        0x3b,
        0x00,
        0x02,
        0x00,
        0xc9,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x01,
        0x00,
        0x1a,
        0x10,
        0x00,
        0x00,
        0x04,
        0x00,
        0x0c,
        0x00,
        0x01,
        0x00,
        0x04,
        0x00,
        0x30,
        0x00,
        0x01,
        0x00,
        0x31,
        0x00,
        0x01,
        0x00,
        0x32,
        0x00,
        0x04,
        0x10,
        0x00,
        0x00,
        0x0e,
        0x00,
        0x00,
        0x00,
        0x00,
        0x01,
        0x02,
        0x00,
        0x00,
        0x00,
        0x01,
        0x04,
        0x00,
        0x00,
        0x40,
        0x00,
        0x52,
        0x1b,
        0x3d,
        0x00,
        0x52,
        0x1b,
        0x3d,
        0x00,
        0x00,
        0x00,
        0x28,
        0x00,
        0x00,
        0x00,
        0x01,
        0x04,
        0x00,
        0x03,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0xc0,
        0xa8,
        0x06,
        0x65,
        0xc0,
        0xa8,
        0x06,
        0x66,
        0x3e,
        0x81,
        0xc1,
        0xaa,
        0x00,
        0x14,
        0x06,
        0x08,
        0x00,
        0x27,
        0x3a,
        0xdd,
        0x56,
        0x90,
        0x1b,
        0x0e,
        0x95,
        0x74,
        0x93,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x03,
        0x01,
    ];

    let res = NetFlow9::from_bytes(&packet_bytes);
    assert!(res.is_ok());

    let netflow = res.unwrap();
    assert_eq!(netflow.version, 9);
    assert_eq!(netflow.count, 7);
    assert_eq!(netflow.sys_uptime, 5502099);
    assert_eq!(netflow.timestamp, 1523936618);
    assert_eq!(netflow.flow_sequence, 883);
    assert_eq!(netflow.flow_sets.len(), 7);
    // assert!(netflow.flow_sets[0]);
}
